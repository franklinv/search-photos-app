{"version":3,"sources":["Components/SearchForm.js","App.js","serviceWorker.js","index.js"],"names":["SearchForm","state","searchText","onSearchChange","e","setState","target","value","handleSubmit","preventDefault","props","onSearch","currentTarget","reset","onSubmit","this","htmlFor","type","className","onChange","name","placeholder","Component","App","handlePageClick","selectedPage","selected","currentPage","performSearch","query","formstatus","getPhotos","data","perPage","bind","axios","get","then","res","totalPages","total","results","loadingState","pageCount","Math","ceil","catch","err","console","log","previousLabel","nextLabel","breakLabel","breakClassName","marginPagesDisplayed","pageRangeDisplayed","onPageChange","forcePage","containerClassName","subContainerClassName","activeClassName","map","objImage","index","key","id","alt_description","src","urls","small","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"gUAEqBA,G,wNACpBC,MAAQ,CACPC,WAAY,I,EAGbC,eAAiB,SAAAC,GAChB,EAAKC,SAAS,CAAEH,WAAYE,EAAEE,OAAOC,S,EAGtCC,aAAe,SAAAJ,GACdA,EAAEK,iBACF,EAAKC,MAAMC,SAAS,EAAKV,MAAMC,WAAW,UAC1CE,EAAEQ,cAAcC,S,uDAIhB,OACC,0BAAMC,SAAUC,KAAKP,cACpB,0BAAMQ,QAAQ,UAAd,sBACA,2BACCC,KAAK,SACLC,UAAU,YACVC,SAAUJ,KAAKZ,eACfI,MAAOQ,KAAKd,MAAMC,WACfkB,KAAK,SACRC,YAAY,cAEZ,4BAAQJ,KAAK,SAASC,UAAU,gBAChC,uBAAGA,UAAU,uB,GA5BsBI,cCQnBC,E,kDACpB,aAAe,IAAD,8BACb,gBAWDC,gBAAkB,SAACpB,GAClB,IAAMqB,EAAgBrB,EAAEsB,SAAW,EAGnC,EAAKrB,SAAS,CACbsB,YAAaF,IACX,WACF,EAAKG,cAAc,EAAK3B,MAAM4B,WAnBlB,EAqDdD,cAAgB,SAACC,GAAyB,IAAnBC,EAAkB,uDAAP,GAEjB,UAAZA,EAGH,EAAKzB,SAAS,CACbsB,YAAa,IACX,WACF,EAAKI,UAAUF,MAKhB,EAAKE,UAAUF,IAhEhB,EAAK5B,MAAQ,CACZ+B,KAAM,GACNC,QAAS,GACTN,YAAa,EACbE,MAAM,IAGP,EAAKL,gBAAkB,EAAKA,gBAAgBU,KAArB,gBATV,E,gEA0BbnB,KAAKa,kB,gCAIIC,GACT,IAAD,OAECM,IACEC,IADF,sDAEiDrB,KAAKd,MAAM0B,YAF5D,8BAE6FE,EAF7F,sBADc,gDAKZQ,MAAK,SAAAC,GAGL,IAAIC,EAAWD,EAAIN,KAAKQ,MAExB,EAAKnC,SAAS,CAACwB,MAAMA,IACrB,EAAKxB,SAAS,CAAE2B,KAAMM,EAAIN,KAAKS,QAASC,cAAc,IACtD,EAAKrC,SAAS,CAAEsC,UAAWC,KAAKC,KAAKN,EAAa,EAAKtC,MAAMgC,cAE7Da,OAAM,SAAAC,GACNC,QAAQC,IAAI,kCAAmCF,Q,+BAyBjD,OACC,yBAAK7B,UAAU,YACd,yBAAKA,UAAU,eACd,yBAAKA,UAAU,SACd,wBAAIA,UAAU,cAAd,mCACA,kBAAC,EAAD,CAAYP,SAAUI,KAAKa,kBAMvB,yBAAKV,UAAU,YACZ,kBAAC,IAAD,CACKgC,cAAe,OACfC,UAAW,OACXC,WAAY,MACZC,eAAgB,WAChBV,UAAW5B,KAAKd,MAAM0C,UACtBW,qBAAsB,EAClCC,mBAAoB,EACpBC,aAAczC,KAAKS,gBACnBiC,UAAW1C,KAAKd,MAAM0B,YAAc,EACxB+B,mBAAoB,aACpBC,sBAAuB,mBACvBC,gBAAiB,YAG9B7C,KAAKd,MAAM+B,KAAK6B,KAAI,SAACC,EAAUC,GAAX,OAClB,yBAAK7C,UAAU,QACjB,uBAAG8C,IAAKF,EAASG,IAAKH,EAASI,iBAC/B,yBAAKhD,UAAU,WAAWiD,IAAKL,EAASM,KAAKC,iB,GAvGjB/C,aCEbgD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7C,MAAK,SAAA8C,GACJA,EAAaC,gBAEdtC,OAAM,SAAAuC,GACLrC,QAAQqC,MAAMA,EAAMC,c","file":"static/js/main.fd41ee26.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nexport default class SearchForm extends Component {\r\n\tstate = {\r\n\t\tsearchText: ''\r\n\t};\r\n\r\n\tonSearchChange = e => {\r\n\t\tthis.setState({ searchText: e.target.value });\r\n\t};\r\n\r\n\thandleSubmit = e => {\r\n\t\te.preventDefault();\r\n\t\tthis.props.onSearch(this.state.searchText,'submit');\r\n\t\te.currentTarget.reset();\r\n\t};\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<form onSubmit={this.handleSubmit}>\r\n\t\t\t\t<span htmlFor=\"search\">Search for a photo</span>\r\n\t\t\t\t<input\r\n\t\t\t\t\ttype=\"search\"\r\n\t\t\t\t\tclassName=\"searchBox\"\r\n\t\t\t\t\tonChange={this.onSearchChange}\r\n\t\t\t\t\tvalue={this.state.searchText}\r\n\t\t\t\t    name=\"search\"\r\n\t\t\t\t\tplaceholder=\"Search...\"\r\n\t\t\t\t/>\r\n\t\t\t\t <button type=\"submit\" className=\"searchButton\">\r\n\t\t\t\t\t<i className=\"fa fa-search\"></i>\r\n\t\t\t\t</button>\r\n\t\t\t</form>\r\n\t\t);\r\n\t}\r\n}","import React, { Component } from 'react';\nimport axios from 'axios';\nimport ReactPaginate from 'react-paginate';\nimport 'font-awesome/css/font-awesome.min.css';\n\nimport './App.css';\n\nimport SearchForm from './Components/SearchForm';\n\n\nexport default class App extends Component {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = {\n\t\t\tdata: [],\n\t\t\tperPage: 10,\n\t\t\tcurrentPage: 1,\n\t\t\tquery:''\n\t\t};\n\t\t\n\t\tthis.handlePageClick = this.handlePageClick.bind(this);\n\t}\n\n\thandlePageClick = (e) => {\n\t\tconst selectedPage = (e.selected + 1);\n\t\t//const offset = selectedPage * this.state.perPage;\n  \n\t\tthis.setState({\n\t\t\tcurrentPage: selectedPage\n\t\t}, () => {\n\t\t\tthis.performSearch(this.state.query)\n\t\t});\n  \n\t};\n\n\t\n\tcomponentDidMount() {\n\t\tthis.performSearch();\n\t}\n\n\t// method to retirve the photos after calling the Unspalsh API\n\tgetPhotos(query)\n\t{\n\t\tlet client_id='9sJfO7IvQxI1wZE1ZhDBf_LmDOYJeam9g4L3XjPmWxI';\n\t\taxios\n\t\t\t.get(\n\t\t\t\t`https://api.unsplash.com/search/photos?page=${this.state.currentPage}&per_page=10&query=${query}&client_id=${client_id}`\n\t\t\t)\n\t\t\t.then(res => {\n\t\t\t//this.setState({ imgs: data.data.results, loadingState: false });\n\t\t\t//const data = res.data.results;\n\t\t\t\tlet totalPages=res.data.total;\n\t\t\t\t\n\t\t\t\tthis.setState({query:query});\n\t\t\t\tthis.setState({ data: res.data.results, loadingState: false });\n\t\t\t\tthis.setState({ pageCount: Math.ceil(totalPages / this.state.perPage)})\n\t\t\t})\n\t\t\t.catch(err => {\n\t\t\t\tconsole.log('Error happened during fetching!', err);\n\t\t\t});\n\t\t\n\t}\n\t\n\t// main method which calls the getphotos method to search for photos\n\tperformSearch = (query,formstatus=\"\") => {\n\n\t\tif (formstatus==\"submit\")\n\t\t{\n            // to reset the page link when a new qyery is entered\n\t\t\tthis.setState({\n\t\t\t\tcurrentPage: 1\n\t\t\t}, () => {\n\t\t\t\tthis.getPhotos(query);\n\t\t    });\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.getPhotos(query);\n\t\t}\n   \n\t};\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"divstyle\">\n\t\t\t\t<div className=\"main-header\">\n\t\t\t\t\t<div className=\"inner\">\n\t\t\t\t\t\t<h1 className=\"main-title\">Search online photos by tagname</h1>\n\t\t\t\t\t\t<SearchForm onSearch={this.performSearch} />\n\t\t\t\t\t</div>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t \n\t\t  \t\n          <div className=\"divstyle\">\n             <ReactPaginate\n                  previousLabel={\"prev\"}\n                  nextLabel={\"next\"}\n                  breakLabel={\"...\"}\n                  breakClassName={\"break-me\"}\n                  pageCount={this.state.pageCount}\n                  marginPagesDisplayed={2}\n\t\t\t\t  pageRangeDisplayed={5}\n\t\t\t\t  onPageChange={this.handlePageClick}\n\t\t\t\t  forcePage={this.state.currentPage - 1}\n                  containerClassName={\"pagination\"}\n                  subContainerClassName={\"pages pagination\"}\n                  activeClassName={\"active\"}/>\n          </div>\n\n    {this.state.data.map((objImage, index) => (\n       <div className=\"card\">\n\t\t   <p key={objImage.id}>{objImage.alt_description}</p>\n\t\t   <img className=\"imgstyle\" src={objImage.urls.small} ></img>\n      </div>\n    ))}\n         \n\t\t\t</div>\n\t\t);\n\t}\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport App from './App';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}